<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Heroseo's Book</title>
  <link href="../Styles/Style0001.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <div class="Basic-Text-Frame">
    <p class="AppName">uC/OS-2를 활용한 임베디드 시스템 개발</p>
  </div>

  <div id="ung-3.html" xml:lang="en-US" xmlns:xml="http://www.w3.org/XML/1998/namespace">
    <div class="Basic-Text-Frame">
      <p class="subtitle1" id="toc_marker-1">요약</p>

      <p class="bodyText">이 문서는 Embedded System Project #2의 내용을 담고 있다. uC/OS-2에서 Task 세 개를 생성하여 각각 segment에 할당하고, MBox를 사용하여 Task간 통신을 한다. 최종 결과는 Seven segment 3개를 사용한 스톱워치 이다.</p>

      <p class="subtitle1">1. Overview</p>

      <p class="bodyText">전체적인 구성은 아래 그림과 같다. 기본적으로 시간을 표시할 7segment 3개, 내부 LED 2개, 외부 LED 2개, 스톱워치 start와 stop을 위한 스위치로(보드 내부 버튼) 구성된다. 외부 LED 오른쪽 7segment 2개는 가장 오른쪽부터 각각 밀리 초, 초를 나타낸다. 외부 LED 왼쪽 7segment는 10초 단위를 표시한다. 내부 LED 두 개는 현재 스톱워치의 상태를 나타내는데 stop 상태일 때는 왼쪽 LED에 불이 들어오고, start 상태일 때는 왼쪽 LED 대신 오른쪽 LED에 불이 들어온다. (오른쪽 LED는 밀리 초 단위로 깜빡인다.)</p>

      <p class="ximage"><img alt="sb1.png" class="image" src="../Images/uc1.png" /></p>

      <p class="subtitle1">2. Seven Segment 제어</p>

      <p class="TextTOC">2.1 Pin define</p>

      <p class="bodyText">우리가 사용하고자 하는 GPIO Pin은 Block 단위로 제어해야 한다. 하지만 우리가 segment에 연결할 때는 그 segment pin에 맞아야 segment에 불이 들어온다. 이를 위해 각 Block과 Pin 번호를 미리 define해놓고, segment를 제어할 때 define 값을 이용하였다.</p>

      <p class="bodyText">(생략)</p>

      <p class="TextTOC">2.2 BSP Init 설정</p>

      <p class="bodyText">GPIO를 제어하기 위해서 먼저 BSP_Init에서 각 segment에 해당하는 핀을 초기화 해준다. 이 작업을 하지 않으면 GPIO를 제어할 수 없다.</p>

      <p class="ximage"><img alt="uc2.png" class="image" src="../Images/uc2.png" /></p>

      <p class="bodyText">(생략)</p>

      <p class="TextTOC">2.3 Bit 설정</p>

      <p class="bodyText">GPIO를 실제로 제어하는 부분이다. 7segment에서는 Bit가 0이면 켜지고 1이면 꺼진다. 따라서 먼저 ALL_set()이라는 함수를 만들어 이 함수를 호출해서 GPIO의 할당되어 있는 핀들의 Bit을 전부 다 1로 설정한다. ALL_set()함수 코드는 다음과 같다.</p>

      <p class="bodyText">GPIOA, GPIOB, GPIOC별로 GPIO_SetBits함수를 호출하여 각 핀 bit들을 로 설정한다. 이렇게 해서 처음 전원이 들어올 때 7 세그먼트들은 다 꺼져 있는 상태가 된다.</p>

      <p class="bodyText">SetSevenx()함수에서는 파라미터로 int형 number를 받아서 그 number 값에 따라 7 세그먼트에서 그 number 값을 출력하는 데 필요한 핀들의 bit을 1로 설정한다. 해당 핀들은 1로 설정되기 때문에 꺼진다.</p>

      <p class="bodyText">RessetSevenx()함수에서는 파라미터로 int형 number를 받아서 그 number 값에 따라 7 세그먼트에서 그 number 값을 출력하는 데 필요한 핀들의 bit을 0으로 설정한다. 해당 핀들의 bit은 0으로 설정되어 켜진다.</p>

      <p class="bodyText">(생략)</p>

      <p class="subtitle1">3. Task간 통신</p>

      <p class="bodyText">이 회로는 총 3개의 Task로 구성되어 있으며, 각 Task간에는 MailBox로 Message를 주고 받으며 동작한다. 각 Task는 100 millisecond, 1 second, 그리고 10 second로 각 자리 수를 동작시키는 기능을 수행한다. 3개의 Task는 main에서 생성되고, Task간의 통신을 위해 전역변수로 선언된 AckMbox, AckMboxH, TxMbox, TxMoxH 또한 main에서 MailBox로 생성한다.</p>

      <p class="ximage"><img alt="uc3.png" class="image" src="../Images/uc3.png" /></p>

      <p class="bodyText">표에서 App_TaskSeg2와 App_TaskSeg3을 생성하는 부분은 App_TaskSeg1을 생성하는 부분과 다를게 없기 때문에 생략하였다. main에서는 Task간 통신을 위해 MailBox와 3개의 Task를 생성한 후 OSStart()를 호출한다. 각 Task는 7Segment 핀을 제어하기 때문에 Task 함수 첫 부분에 BSP_Init()를 한다. 그 중 첫 번째 Task인 App_TaskSeg2는 100 millisecond단위를 동작시킨다. 그리고 다른 두 Task가 1second와 10second 자리의 수만 관리하는 것에 비해 스위치 입력을 받는 등 많은 일을 한다. 다음은 App_TaskSeg2 함수이다.</p>

      <p class="bodyText">(생략)</p>

      <p class="subtitle1">4. 결론</p>

      <p class="bodyText">최종적으로 구현하고자 하였던 stopwatch의 기능은 모두 추가하였다. 3개의 7Segment를 사용하여 00.0 초를 표시 할 수 있도록 하였고, 시작과 정지를 할 수 있는 스위치 기능도 구현하였다. 여기에 추가적으로 구현한 부분은 기존의 보드에 있는 두 개의 내부 LED를 사용하여 stopwatch가 동작 중일 때와, 정지 상태일 때를 구분 하여 표시하도록 하였다.</p>

      <p class="bodyText">코드를 구현함에 있어서는 Task간의 통신을 위해 EventFlag를 사용하는 것과 MailBox를 사용하는 것 두 가지 중 고민을 하였으나, 각 Task간의 Message 전달이 많이 필요하지 않았기 때문에 MailBox를 사용하였다.</p>

      <p class="bodyText">코딩 상의 어려움은 없었지만, GPIO PIN을 다루는 하드웨어 상의 어려움이 조금 있었다. 3개의 7Segment와 두 개의 외부 LED를 연결하였는데, breadboard를 통해 연결된 선에는 아무 이상이 없었으나 STM 보드가 이상하게 동작하는 현상이 일어났다. 별수 없이 연결된 핀을 여러 번 바꿔가면서 일일이 GPIO가 제대로 동작하는지 확인할 수 밖에 없었다. 그리고 연결시킨 PIN을 uC/OS-2에서 사용하기 위해 초기화를 시켜야 하는데 이 부분에서도 약간의 어려움이 있었다.</p>

      <p class="bodyText">아쉬운 부분은 보다 많은 7Segment와 LED를 이용하여 제대로 된 stopwatch를 만들고 싶었는데, 연결할 수 있는 PIN의 수가 한정되어 있기 때문에 어쩔 수 없이 간소화 시켜서 만들게 된 것이다. 최종적으로 완성한 후에, DEMUX를 사용하여 적은 PIN으로도 많은 외부 component들을 연결 할 수 있는 것을 알게 되었다. 하지만 시간 관계상 추가적으로 7segment를 달지는 않았다. 그래도 처음 목표로 하였던 stopwatch의 기능 부분은 완전하게 실행이 되도록 만들었다는 점에서 만족스러운 결과를 얻었다고 할 수 있겠다.</p>
    </div>
  </div>
</body>
</html>
