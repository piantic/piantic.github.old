<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko">
<head>
  <title>Heroseo's Book</title>
  <link href="../Styles/Style0001.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <div class="Basic-Text-Frame">
    <p class="AppName">The Tree as the ADT</p>
  </div>

  <div id="ung-2.html" xml:lang="en-US" xmlns:xml="http://www.w3.org/XML/1998/namespace">
    <div class="Basic-Text-Frame">
      <p class="subtitle1">요약</p>

      <p class="bodyText">이 문서는 BinaryTreeArray, BinaryTreeLinked에서 tree를 탐색하는 방법과 MaxHeap에서의 Time Complexity에 대한 내용을 담고 있다.</p>

      <p class="subtitle1">1. BinaryTreeArray</p>

      <p class="TextTOC">구현</p>

      <p class="bodyText">BinaryTreeArray에서는 각 트리 순회(tree traversal)에 대해서 각각에 대한 Iterator를 이용한다. 따라서 각 traversal의 구현도 그에 대한 Iterator를 구현한 것이다.</p>

      <p class="TextTOCsubtitle">Postorder</p>

      <p class="bodyText">Postorder traversal를 위해서 PostorderIterator를 구현하였다. 그 중에서 중요한 함수는 postbegin(), operator++()가 있다. 기본적으로 Postorder() 함수에서 PostorderIterator type의 지시자를 만들고, 그에 대한 초기값으로 postbegin() 함수를 부른다. Postbegin()에서는 왼쪽 leaf node의 위치를 리턴한다. 다시 Postorder() 함수 내부로 들어오면, PostorderIterator가 마치 포인터처럼 쓰이면서 while문을 돌게 되는데 dereference operator를 이용하여 그 위치에서의 값을 읽어오고, operator++(int)를 이용해 그 다음 값을 읽어온다. Operator++(int) 함수는 내부적으로 다시 operator++()함수를 부른다. 여기서 postorder traversal를 하기 위해 그 위치의 오른쪽 node로 이동하고, 그 node의 왼쪽 child가 있다면 계속 왼쪽으로 이동해서 왼쪽 leaf node의 내용을 출력하고, 없다면 다시 오른쪽으로 이동하여 반복한다. 만약 오른쪽으로 갈 수 없다면 그 node의 parent로 이동한다. 따라서 Postorder()함수에서 겉으로 보기에는 그냥 iterator를 하나 증가시키는 것이지만 실제로는 내부 연산을 통해 postorder traversal를 진행하고 있는 것이다.</p>

      <p class="TextTOCsubtitle">Pretorder</p>

      <p class="bodyText">Preorder()함수도 PreorderIterator를 구현하여 동작한다. Postorder()함수와 겉보기는 똑같다. 단지 Iterator가 PostorderIterator가 아닌 PreorderIterator이다. Preorder traversal는 node를 먼저 방문하고, 왼쪽으로 가서 계속한다. 더 이상 계속할 수 없으면 오른쪽으로 이동하여 다시 시작하거나, 오른쪽으로 이동하여 traversal를 계속할 수 있을 때까지 되돌아간다. 따라서 prebegin()함수는 root를 리턴한다. Operator(int)++ 함수도 내부적으로 operator()++함수를 부르고, 여기서 실제적인 Preorder traversal를 한다. root에서 왼쪽 child가 있으면 그 위치를 리턴하고, 계속 왼쪽으로 진행해나간다. Node가 없으면(왼쪽 child가 없으면) 오른쪽 child를 리턴한다. 오른쪽 child도 없으면 traversal이 가능할 때까지 돌아간다.</p>

      <p class="TextTOCsubtitle">Levelorder</p>

      <p class="bodyText">Levelorder traversal는 그 level에 있는 node를 다 방문하고 다음 level에 있는 node를 방문한다. 따라서 levelbegin()은 root 위치를 리턴한다. 실제적인 traversal은 operator()++에서 일어나는데 그 위치에 대한 level를 구하고, 현재 위치에 +1을 해서 다음 node의 위치를 구한다(배열이므로 +1을 하면 같은 level에 있는 다음 node의 위치를 가리키게 된다.). +1을 했을 때, 다음 위치가 없으면 다음 level의 첫 번째 node의 위치를 가리킨다.</p>

      <p class="subtitle1" id="toc_marker-1">2. BinaryTreeLinked</p>

      <p class="TextTOCsubtitle">Postorder, PostorderR</p>

      <p class="bodyText">Array버전과 비슷하게 PostorderIterator를 구현함으로써 순회(traversal)한다. Array버전과 구현 방법은 비슷하다. 차이점이라면 Array대신 Linkedlist로 표현한 점과 parent node를 방문하기 위해 Stack을 사용한다는 점이다. Postbegin() 함수에서 왼쪽 leaf node를 찾아 가면서 방문하는 node를 stack에 넣어 둔다. 나중에 node의 parent로 돌아갈 때 Stack에 있는 node를 하나씩 꺼낸다(Postbegin()함수는 root를 인자로하는 PostorderIterator의 생성자를 호출하고, 실제적인 처리는 PostorderIterator의 생성자 부분에서 담당한다.). PostorderR()은 node의 왼쪽 child를 방문하고 다시 오른쪽 child를 방문한 후, 자기 자신을 방문한다. 내부 구현은 recursive하게 PostorderR() 함수를 다시 호출한다.</p>

      <p class="TextTOCsubtitle">Preorder, PreorderR</p>

      <p class="bodyText">순회(traversal)하는 방법은 Array버전과 비슷하고, 왼쪽으로 가면서 다시 돌아갈 상황을 대비해서 Stack에 각 node를 저장한다. PreorderR()함수는 PostorderR()함수처럼 recursive하게 구현하였다.</p>

      <p class="TextTOCsubtitle">Levelorder</p>

      <p class="bodyText">Levelorder() 함수는 다른 traversal과 다르게 내부적으로 Queue를 사용한다. LevelorderIterator의 생성자가 호출되면 그 node의 왼쪽 child와 오른쪽 child를 Queue에 저장한다(처음에는 root에서 시작한다.). 그 다음 Queue에 저장된 node를 꺼낸 후 다시 위의 과정을 반복하면 각 level에 대한 node들이 순서대로 Queue에 저장된다. Levelorder()함수에서 지시자 값을 포인터처럼 하나씩 증가 시킬 때 마다 operator()++에서 Queue에 저장된 정보를 꺼내서 출력한다.</p>

      <p class="TextTOCsubtitle">Depth</p>

      <p class="bodyText">Depth()함수의 구현은 Levelorder() 함수의 구현을 이용한다. Levelorder 방법으로 각 node를 순회(traversal)한다. 이 때 Queue에 저장된 node의 개수를 저장해 놓는다(Queue에 들어있는 node의 수는 총 node의 수와 같다.). 그 다음 while문을 돌면서 총 node의 수를 나누어 줄 때마다 depth값을 증가 시키면 그 Tree의 깊이를 구할 수 있다(깊이k가 일 때, 총 node의 수 = 2^k – 1, 반대로 총 node의 수가 n이면 깊이k = log_2 n).</p>

      <p class="subtitle1">3. BinaryTreeArray와 BinaryTreeLinked의 결과</p>

      <p class="ximage"><img alt="ds2.png" class="image" src="../Images/ds2.png" /></p>

      <p class="ximage"><img alt="ds1.png" class="image" src="../Images/ds1.png" /></p>

      <p class="subtitle1">4. Time Complexity</p>

      <p class="bodyText">Ordered List는 Push할 때, 순서에 맞게 정렬해서 값을 저장한다. 따라서 Push할 때는 O(n)의 time complexity가 일어난다. 대신 Top()함수로 값을 얻을 때와 Pop을 할 때는 그냥 제일 처음에 있는 값을 이용하면 되므로 big-O가 O(1)이다. 그에 비해 Unordered List는 Push할 경우에는 그냥 값을 저장하면 되므로 big-O가 O(1)이지만 Top()이나 Pop()을 할 때에는 가장 큰 값을 찾아야 하므로 big-O가 O(n)이 된다. 코드에서 Top()알하고 Pop()을 하므로 O(n) + O(n) = 2O(n)이 된다. 결과를 보면 OL에 비해 UL이 약 2배의 시간이 걸림을 확인할 수 있다(프로그램을 실행할 때마다 위의 결과와 항상 똑같이 나오지는 않는다.). BinaryTreeArray 버전은 Push와 Pop을 할 때 O(log⁡n)의 Time complexity가 일어난다(Top()함수의 big-O도 O(log⁡n)이다.). 따라서 data의 양이 많을 경우 BT버전을 이용하면 time complexity를 많이 줄일 수 있다.</p>
    </div>
  </div>
</body>
</html>
